{"version":3,"sources":["components/Square.js","components/Board.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Square","id","button","useRef","useContext","RxJsContext","click$","random$","score$","useState","isActive","setActive","useEffect","subs","activateSignals$","pipe","filter","val","mapTo","deactiveSignals$","merge","active$","distinctUntilChanged","scoreOffset$","timestamp","sample","map","s","v","value","Math","max","GAME_UNIT_TIME","push","subscribe","bool","forEach","sub","unsubscribe","subscription","fromEvent","current","ref","className","toRandom","floor","random","GAME_LENGTH","Board","props","tick$","dispatch","key","Subject","Score","startBtn","score","setScore","bestScore","setBestScore","BehaviorSubject","startNew$","cumulativeScore$","scan","acc","bestScore$","resetScoreOffset$","switchMap","take","interval","x","createContext","reducer","state","action","console","log","App","useReducer","context","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAOe,SAASA,EAAT,GAAyB,IAAPC,EAAM,EAANA,GAEvBC,EAASC,iBAAO,MAFa,EAGGC,qBAAWC,GAHd,sBAG1BC,EAH0B,EAG1BA,OAAQC,EAHkB,EAGlBA,QAASC,EAHS,EAGTA,OAHS,EAILC,oBAAS,GAJJ,mBAI5BC,EAJ4B,KAIlBC,EAJkB,KA+CnC,OAzCAC,qBAAU,WACN,GAAIN,GAAUC,EAAS,CACnB,IAAMM,EAAO,GAEPC,EAAmBP,EAAQQ,KAAKC,aAAO,SAAAC,GAAG,OAAIA,IAAQhB,KAAKiB,aAAM,IACjEC,EAAmBC,YACrBb,EAAQQ,KAAKC,aAAO,SAAAC,GAAG,OAAIA,IAAQhB,KAAKiB,aAAM,IAC9CZ,EAAOS,KAAKC,aAAO,SAAAC,GAAG,OAAIA,IAAQhB,KAAKiB,aAAM,KAG3CG,EAAUD,YACZN,EACAK,GACFJ,KACEO,eAGEC,EAAeC,cAAYjB,GAASQ,KACtCU,YAAOT,aAAO,SAAAC,GAAG,OAAY,IAARA,IAAdD,CAA6BK,IACpCK,aAAI,SAAAC,GAAC,OAAIA,EAAEH,aACXA,cACAE,aAAI,SAAAE,GAAC,OAAIA,EAAEJ,UAAYI,EAAEC,SACzBb,aAAO,SAAAY,GAAC,OAAIA,EAAI,KAChBF,aAAI,SAAAE,GAAC,OAAIE,KAAKC,IAAIC,EAAiBJ,EAAG,OAO1C,OAHAf,EAAKoB,KAAKZ,EAAQa,WAAU,SAAAC,GAAI,OAAIxB,EAAUwB,OAC9CtB,EAAKoB,KAAKV,EAAaW,UAAU1B,IAE1B,kBAAMK,EAAKuB,SAAQ,SAAAC,GAAG,OAAIA,EAAIC,qBAE1C,CAAChC,EAAQC,EAASC,EAAQP,IAE7BW,qBAAU,WACN,GAAIN,EAAQ,CACR,IAAMiC,EAAerB,YAAMjB,EAANiB,CAAUsB,YAAUtC,EAAOuC,QAAS,UAAUP,UAAU5B,GAC7E,OAAO,WAAqBiC,EAAaD,kBAE9C,CAACpC,EAAQI,EAAQL,IAGhB,4BAAQyC,IAAKxC,EAAQyC,UAAU,UAC1BjC,GAAY,K,YCjDnBkC,EAAW,kBAAMd,KAAKe,MAAsB,EAAhBf,KAAKgB,WAC1Bd,EAAiB,IACjBe,EAAc,GAEZ,SAASC,EAAMC,GAAQ,IAAD,EAEH7C,qBAAWC,GAFR,mBAExB6C,EAFwB,KAExBA,MAASC,EAFe,KAiCjC,OA5BAvC,qBAAU,WACNuC,EAAS,CACLC,IAAK,SACLvB,MAAO,IAAIwB,QAEhB,CAACF,IAGJvC,qBAAU,WACNuC,EAAS,CACLC,IAAK,QACLvB,MAAO,IAAIwB,QAEhB,CAACF,IAGJvC,qBAAU,WACN,GAAIsC,EAAO,CACP,IAAM3C,EAAU,IAAI8C,IACdhB,EAAMX,YAAIkB,EAAJlB,CAAcwB,GAAOhB,UAAU3B,GAK3C,OAJA4C,EAAS,CACLC,IAAK,UACLvB,MAAOtB,IAEJ,kBAAM8B,EAAIC,kBAEtB,CAACY,EAAOC,IAGP,6BACI,yBAAKR,UAAU,aACX,kBAAC3C,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,KAEhB,yBAAK0C,UAAU,aACX,kBAAC3C,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,KAEhB,yBAAK0C,UAAU,aACX,kBAAC3C,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,IACZ,kBAACD,EAAD,CAAQC,GAAI,M,4CCrDb,SAASqD,EAAML,GAE1B,IAAMM,EAAWpD,iBAAO,MAFS,EAGPM,mBAAS,GAHF,mBAG1B+C,EAH0B,KAGnBC,EAHmB,OAIChD,mBAAS,GAJV,mBAI1BiD,EAJ0B,KAIfC,EAJe,OAKKvD,qBAAWC,GALhB,0BAKxBG,EALwB,EAKxBA,OAAQ0C,EALgB,EAKhBA,MAASC,EALO,KAqCjC,OA9BAvC,qBAAU,WACNuC,EAAS,CACLC,IAAK,SACLvB,MAAO,IAAI+B,IAAgB,OAEhC,CAACT,IAEJvC,qBAAU,WACN,GAAIsC,GAAS1C,EAAQ,CACjB,IAAMK,EAAO,GAEPgD,EAAYrB,YAAUe,EAASd,QAAS,SACxCqB,EAAmBC,aAAK,SAACC,EAAK/C,GAAN,OAAc+C,EAAM/C,IAAK,EAA9B8C,CAAiCvD,GACpDyD,EAAaH,EAAiB/C,KAChCgD,aAAK,SAACC,EAAK/C,GAAN,OAAca,KAAKC,IAAIiC,EAAK/C,KAAM,GACvCK,eAEE4C,EAAoBJ,EAAiB/C,KACvCU,YAAOoC,GACPnC,aAAI,SAAAG,GAAK,OAAKA,MAOlB,OAJAhB,EAAKoB,KAAKiC,EAAkBhC,UAAU1B,IACtCK,EAAKoB,KAAK4B,EAAU9C,KAAKoD,aAAU,kBAAMC,YAAKrB,EAALqB,CAAkBC,YAASrC,QAAmBE,UAAUgB,IACjGrC,EAAKoB,KAAK6B,EAAiB5B,WAAU,SAAAoC,GAAC,OAAIb,EAASa,OACnDzD,EAAKoB,KAAKgC,EAAW/B,WAAU,SAAAjB,GAAG,OAAI0C,EAAa1C,OAC5C,kBAAMJ,EAAKuB,SAAQ,SAAAC,GAAG,OAAIA,EAAIC,qBAE1C,CAACiB,EAAUL,EAAO1C,EAAQ2C,IAGzB,oCACI,4BAAQT,IAAKa,GAAb,kBACA,sCAAYC,GACZ,qCAAWE,I,8NC1ChB,IAAMrD,EAAckE,0BAE3B,SAASC,EAAQC,EAAOC,GAGtB,OAFAC,QAAQC,IAAI,UAAUH,EAAOC,G,yVAEtB,CAAP,GACKD,EADL,eAEGC,EAAOtB,IAAMsB,EAAO7C,QAiBVgD,MAZf,WAAgB,IAAD,EACeC,qBAAWN,EAAS,IADnC,mBACNO,EADM,KACG5B,EADH,KAGb,OACE,kBAAC9C,EAAY2E,SAAb,CAAsBnD,MAAO,CAACkD,EAAS5B,IACrC,kBAACG,EAAD,MACA,kBAACN,EAAD,QCXciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.78644372.chunk.js","sourcesContent":["import React, { useRef, useEffect, useContext, useState } from \"react\";\r\nimport { fromEvent, merge } from \"rxjs\";\r\nimport { RxJsContext } from \"../App\";\r\nimport { sample, mapTo, filter, distinctUntilChanged, timestamp, map } from \"rxjs/operators\";\r\nimport { GAME_UNIT_TIME } from \"./Board\";\r\n\r\n\r\nexport default function Square({ id }) {\r\n\r\n    const button = useRef(null);\r\n    const [{ click$, random$, score$ }] = useContext(RxJsContext);\r\n    const [isActive, setActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (click$ && random$) {\r\n            const subs = [];\r\n\r\n            const activateSignals$ = random$.pipe(filter(val => val === id), mapTo(true))\r\n            const deactiveSignals$ = merge(\r\n                random$.pipe(filter(val => val !== id), mapTo(false)),\r\n                click$.pipe(filter(val => val === id), mapTo(false))\r\n            )\r\n\r\n            const active$ = merge(\r\n                activateSignals$,\r\n                deactiveSignals$\r\n            ).pipe(\r\n                distinctUntilChanged()\r\n            );\r\n\r\n            const scoreOffset$ = timestamp()(random$).pipe(\r\n                sample(filter(val => val === false)(active$)),\r\n                map(s => s.timestamp),\r\n                timestamp(),\r\n                map(v => v.timestamp - v.value),\r\n                filter(v => v > 5),\r\n                map(v => Math.max(GAME_UNIT_TIME - v, 0))\r\n            );\r\n\r\n\r\n            subs.push(active$.subscribe(bool => setActive(bool)));\r\n            subs.push(scoreOffset$.subscribe(score$));\r\n\r\n            return () => subs.forEach(sub => sub.unsubscribe());\r\n        }\r\n    }, [click$, random$, score$, id]);\r\n\r\n    useEffect(() => {\r\n        if (click$) {\r\n            const subscription = mapTo(id)(fromEvent(button.current, \"click\")).subscribe(click$); // subject subscribing to click stream of this square\r\n            return function cleanup() { subscription.unsubscribe() };\r\n        }\r\n    }, [button, click$, id]);\r\n\r\n    return (\r\n        <button ref={button} className=\"square\">\r\n            {isActive && \"X\"}\r\n        </button>\r\n    );\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport Square from \"./Square\";\r\nimport { RxJsContext } from \"../App\";\r\nimport { Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\n\r\nconst toRandom = () => Math.floor(Math.random() * 9);\r\nexport const GAME_UNIT_TIME = 500;\r\nexport const GAME_LENGTH = 10;\r\n\r\nexport default function Board(props) {\r\n\r\n    const [{ tick$ }, dispatch] = useContext(RxJsContext);\r\n\r\n    // register a click$ which squares will send their click events\r\n    useEffect(() => {\r\n        dispatch({\r\n            key: \"click$\",\r\n            value: new Subject()\r\n        });\r\n    }, [dispatch]);\r\n\r\n    // register a tick$ \r\n    useEffect(() => {\r\n        dispatch({\r\n            key: \"tick$\",\r\n            value: new Subject()\r\n        });\r\n    }, [dispatch]);\r\n\r\n    // register random value generator\r\n    useEffect(() => {\r\n        if (tick$) {\r\n            const random$ = new Subject();\r\n            const sub = map(toRandom)(tick$).subscribe(random$)\r\n            dispatch({\r\n                key: \"random$\",\r\n                value: random$\r\n            });\r\n            return () => sub.unsubscribe();\r\n        }\r\n    }, [tick$, dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                <Square id={0}></Square>\r\n                <Square id={1}></Square>\r\n                <Square id={2}></Square>\r\n            </div>\r\n            <div className=\"board-row\">\r\n                <Square id={3}></Square>\r\n                <Square id={4}></Square>\r\n                <Square id={5}></Square>\r\n            </div>\r\n            <div className=\"board-row\">\r\n                <Square id={6}></Square>\r\n                <Square id={7}></Square>\r\n                <Square id={8}></Square>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { RxJsContext } from \"../App\";\r\nimport { BehaviorSubject, fromEvent, interval } from \"rxjs\";\r\nimport { scan, distinctUntilChanged, switchMap, take, sample, map } from \"rxjs/operators\";\r\nimport { GAME_UNIT_TIME, GAME_LENGTH } from \"./Board\";\r\n\r\nexport default function Score(props) {\r\n\r\n    const startBtn = useRef(null);\r\n    const [score, setScore] = useState(0);\r\n    const [bestScore, setBestScore] = useState(0);\r\n    const [{ score$, tick$ }, dispatch] = useContext(RxJsContext);\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            key: \"score$\",\r\n            value: new BehaviorSubject(0)\r\n        });\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (tick$ && score$) {\r\n            const subs = [];\r\n\r\n            const startNew$ = fromEvent(startBtn.current, 'click');\r\n            const cumulativeScore$ = scan((acc, val) => acc + val, 0)(score$);\r\n            const bestScore$ = cumulativeScore$.pipe(\r\n                scan((acc, val) => Math.max(acc, val), 0),\r\n                distinctUntilChanged()\r\n            );\r\n            const resetScoreOffset$ = cumulativeScore$.pipe(\r\n                sample(startNew$),\r\n                map(value => -value)\r\n            )\r\n\r\n            subs.push(resetScoreOffset$.subscribe(score$));\r\n            subs.push(startNew$.pipe(switchMap(() => take(GAME_LENGTH)(interval(GAME_UNIT_TIME)))).subscribe(tick$));\r\n            subs.push(cumulativeScore$.subscribe(x => setScore(x)));\r\n            subs.push(bestScore$.subscribe(val => setBestScore(val)));\r\n            return () => subs.forEach(sub => sub.unsubscribe());\r\n        }\r\n    }, [startBtn, tick$, score$, dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <button ref={startBtn}>Start new game</button>\r\n            <h3>Score: {score}</h3>\r\n            <h3>Best: {bestScore}</h3>\r\n        </>\r\n    )\r\n}","import React, {createContext, useReducer} from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Score from \"./components/Score\";\n\nexport const RxJsContext = createContext();\n\nfunction reducer(state, action) {\n  console.log(\"reducer\",state, action);\n  \n  return {\n    ...state,\n    [action.key]: action.value\n  }\n\n}\n\nfunction App() {\n  const [context, dispatch] = useReducer(reducer, {});\n  \n  return (\n    <RxJsContext.Provider value={[context, dispatch]}>\n      <Score></Score>\n      <Board></Board>\n    </RxJsContext.Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}